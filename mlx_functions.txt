
void	*mlx_init();

	DESCRIPTION	:

	You need to initialize the connection between your software and the display.
	mlx_init() creates this connection.
	It returns a "void *" identifier, used for further calls to the library routines.

	PARAMETERS	:

	No parameters are needed.

	RETURN VALUES	:

	If mlx_init() fails to set up the connection to the X server,
	it will return NULL.
	Otherwise, a non-null pointer is returned as a connection identifier.





<Manage windows>

void	*mlx_new_window(void *mlx_ptr, int size_x, int size_y, char *title);

	DISCRIPTION	:

	mlx_new_window() creates a new window on the screen.
	It returns a "void *" window identifier that can be used by other MiniLibX calls.

	PARAMETERS	:

	size_x	: the size of the new window.
	size_y	: the size of the new window.
	title	: the text that should be displayed in the window's title bar.

	RETURN VALUES	:

	If mlx_new_window() fails to create a new window(for whatever reason),
	it will return NULL.
	Otherwise, a non-null pointer is returned as a window identifier.



int	mlx_clear_window(void *mlx_ptr, void *win_ptr);

	DISCRIPTION	:

	mlx_clear_window() clears(in black) the given window.

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	win_ptr	: the window identifier.

	RETURN VALUES	:

	mlx_clear_window() right now returns nothing.



int	mlx_destroy_window(void *mlx_ptr, void *win_ptr)

	DISCRIPTION	:

	mlx_destroy_window() destroies the given window.

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	win_ptr	: the window identifier.

	RETURN VALUES	:

	mlx_destroy_window right now returns nothing.





<draw inside window>

int	mlx_pixel_put(void *mlx_ptr, void *win_ptr, int x, int y, int color);

	DISCRIPTION	:

	mlx_pixel_put() draws a defiened pixel in the window "win_ptr" at (x, y).
	(It is impossible to display anything outside the specified window,
	nor display in another window in front of the selected one.)

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	win_ptr	: the window identifier.
	x, y	: the origin(0, 0) is the upper left corner of the window,
		  the x and y axis respectively pointing rignt and down.
	color	: the specified color.



int	mlx_string_put(void *mlx_ptr, void *win_ptr, int x, int y, int color, char *string);

	DISCRIPTION	:

	mlx_string_put() displays the specified string in the window "win_ptr".
	It will be displayed at (x, y).
	(It is impossible to display anything outside the specified window,
        nor display in another window in front of the selected one.)

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	win_ptr	: the window identifier.
	x, y	: the origin(0, 0) is the upper left corner of the window,
		  the x and y axis respectively pointing right and down.
	color	: the specified color.
	title	: the text that should be displayed.



#COLOR MANAGEMENT

color parameter has an integer type.
The displayed color needs to be encoded in this integer, following a defiend scheme.

All displayable colors can be split in 3 basic colors: red, green, and blue.
Three associated values, in the 0-255 range, represent how much of each color
is mixed up to create the original color.
These three values must be set inside the integer to display the right color.
The three least significant bytes of this integer are filled as shown
in the picture below:

	| 0 | R | G | B |	color integer
	+---+---+---+---+

While filling the integer, make sure you avoid endian problems.
Remember that "blue" byte should always be the least significant one.





<manipulate images>

void	*mlx_new_image(void *mlx_ptr, int width, int height);

	DISCRIPTION	:

	mlx_new_image() creats a new image in memory.
	It returns a "void *" identifier needed to manipulate this image later.

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	width	: the size of the image to be created.
	height	: the size of the image to be created.

	RETURN VALUES	:

	If an error occurs, returns NULL.
	Otherwise, a non-null pointer is returned as an image identifier.



char	*mlx_get_data_addr(void *img_ptr, int *bits_per_pixel, int *size_line, int *endian);

	DISCRIPTION	:

	mlx_get_data_addr() returns information about the created image,
	allowing a user to modify it later.
	It returns a "char *" address that represents the begining of the memory area
	where the image is stored.

	From this address, the first "bits_per_pixel" bits reperesent the color of the
	first pixel in the first line of the image.
	The second group of "bits_per_pixel" bits represent the second pixel of the
	first line, and so on.
	Add "size_line" to the address to get the begining of the second line.
	You can reach any pixels of the image that way.

	PARAMETERS	:
	
	img_ptr		: the image identifier(it specifies the image to use).
		(the three next parameters should be the addresses
		of three different valid integers)
	bits_per_pixel	: the number of bits needed to represent a pixel color.
			  (also called the depth of the image)
	size_line	: the number of bytes used to store one line of the image in memory.
			  This information is needed to move from one line to another
			  in the image.
	endian		: it tells you whether the pixel color in the image needs to be
			  stored in little endian(endian == 0) or big endian(endian == 1).

	RETURN VALUES	:

	It returns "char *" address that represent the bigining of the memory area
	where the image is stored.



int	mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y);

	DISCRIPTION	:

	The user can draw inside the image, and can dump the image
	insdie a specified window at any time to display it on the screen
	using mlx_put_image_to_window().

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	win_ptr	: the window identifier.
	img_ptr	: the image identifier.
	x, y	: the location where the image should be placed in the window.



unsigned int	mlx_get_color_value(void *mlx_ptr, int color);

	DISCRIPTION	:

	mlx_get_color_value() takes a standard RGB color parameter,
	and it returns an unsigned int value.

	(Depending on the display, the number of bits used to store a pixel color can change.
	The user usually represent a color in RGB mode, using one byte for each component.
	This must be translated to fit the "bits_per_pixel" requirement of the image,
	and make the color understandable to the X-Server.
	The "bits_per_pixel" least significant bits of this value can be store in the image.)

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	color	: the standard RGB color.

	RETURN VALUES	: unsigned int value that is translated for X-Server to understand.

void	*mlx_xpm_to_image(void *mlx_ptr, char **xpm_data, int *width, int *height);

	DISCRIPTION	:

	mlx_xpn_to_image() creates a new image using the specified "xpm_data".

	(MiniLibX does not use the standard Xpm library to deal with xpm images.
	You may not be able to read all types of xpm images.
	It however handles transperency.)

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	xpm_data: the specified xpm data.
	width	: the size of the image to be created.
	height	: the size of the image to be created.

	RETURN VALUES	:

	If an error occurs, returns NULL.
        Otherwise, a non-null pointer is returned as an image identifier.



void	*mlx_xpm_file_to_image(void *mlx_ptr, char *filename, int *width, int *height);

	DISCRIPTION	:

	mlx_xpm_file_to_image() creates a new image using the specified "filename".

	(MiniLibX does not use the standard Xpm library to deal with xpm images.
        You may not be able to read all types of xpm images.
        It however handles transperency.)

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	filename: the specified filename.
	width	: the size of the image to be created.
	height	: the size of the image to be created.

	RETURN VALUES	:

	If an error occurs, returns NULL.
	Otherwise, a non-null pointer is returned as an image identifier.



int	mlx_destroy_image(void *mlx_ptr, void *img_ptr);

	DISCRIPTION	:

	mlx_destroy_window() destroies the given image.

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.
	img_ptr	: the image identifier.





<handle keyboard or mouse events>

int	mlx_loop(void *mlx_ptr);

	DISCRIPTION	:

	To recieve evetns, you must use mlx_loop(). This function never returns.
	It is an infinite loop that waits for an event,
	and then calls a user-defined function associated with this event.

	You can assign different functions to the three following events:
	1. A key is pressed,
	2. The mouse button is pressed,
	3. A part of the window should be re-drawn
	(this is called an "expose" event, and it is your program's job to handle it.)

	Each window ca ndefine a different function for the same event.

	PARAMETERS	:

	mlx_ptr	: the screen connection identifier.



int	mlx_key_hook(void *win_ptr, int (*funct_ptr)(), void *param);

	DISCRIPTION	:

	When a key is pressed.	

	PARAMETERS	:

	win_ptr	 : the window identifier.
	funct_ptr: a pointer to the function you want to be called when an event occurs.
		   this assignment is specific to the window defiend by the "win_ptr".
	param	 : the "param" address will be passed to the function everytime it is called.
		   it is used to store the parameters it might need.



int	mlx_mouse_hook(void *win_ptr, int (*funct_ptr)(), void *param);

	DISCRIPTION	:

	When the mouse button is pressed.

	PARAMETERS	:

	win_ptr	 : the window identifier.
	funct_ptr: a pointer to the function you want to be called when an event occurs.
                   this assignment is specific to the window defiend by the "win_ptr".
	param	 : the "param" address will be passed to the function everytime it is called.
		   it is used to store the parameters it might need.



int	mlx_expose_hook(void *win_ptr, int (*funct_ptr)(), void *param);

	DISCRIPTION	:

	A part of the window should be re-drawn

	PARAMETERS	:

	win_prt	 : the window identifier.
	funct_ptr: a pointer to the function you want to be called when an event occurs.
                   this assignment is specific to the window defiend by the "win_ptr".
	param	 : the "param" address will be passed to the function everytime it is called.
		   it is used to store the parameters it might need.



int	mlx_loop_hook(void *win_ptr, int (*funct_ptr)(), void *param);

	DISCRIPTION	:

	mlx_loop_hook() function is identical to the previous ones,
	but this function will be called when no event occurs.

	expose_hook(void *param);
	key_hook(int keycode, void *param);
	mouse_hook(int button, int x, int y, void *param);
	loop_hook(void *param);
	(param	: the address specified in the mlx_*_hook calls.
		   This address is never used nor modified by the MiniLibX.
	 keycode: it tells you which key is pressed.
	 x, y	: the coordinates of the mouse click in the window.
	 button	: it tells you which mouse button was pressed.)

	(These function naes are arbitrary.
	They here are used to distinguish parameters according to the event.
	These functions are not part of the MiniLibX.)

	PARAMETERS	:

	win_ptr	 : the window identifier.
	funct_ptr: a pointer to the function you want to be called when an event occurs.
                   this assignment is specific to the window defiend by the "win_ptr".
	param	 : the "param" address will be passed to the function everytime it is called.
		   it is used to store the parameters it might need.


